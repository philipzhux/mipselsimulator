#ifndef INSTR_H
#define INSTR_H
#include "project.h"
void addu(uint32_t rs, uint32_t rt, uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void add(uint32_t rs, uint32_t rt, uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void addiu(uint32_t rs,uint32_t rt,uint32_t imm,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void addi(uint32_t rs,uint32_t rt,uint32_t imm,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void oand(uint32_t rs, uint32_t rt, uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void andi(uint32_t rs,uint32_t rt,uint32_t imm,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void clo(uint32_t rd, uint32_t rs,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void clz(uint32_t rd, uint32_t rs, uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void odivu(uint32_t rs, uint32_t rt, uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void odiv(uint32_t rs, uint32_t rt,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void mult(uint32_t rs, uint32_t rt,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void multu(uint32_t rs, uint32_t rt,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void mul(uint32_t rs, uint32_t rt, uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void madd(uint32_t rs, uint32_t rt,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void maddu(uint32_t rs, uint32_t rt,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void msub(uint32_t rs, uint32_t rt,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void msubu(uint32_t rs, uint32_t rt,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void nor(uint32_t rs, uint32_t rt, uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void oor(uint32_t rs, uint32_t rt, uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void ori(uint32_t rs,uint32_t rt,uint32_t imm,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void sll(uint32_t rt,uint32_t rd,uint32_t shamt,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void sllv(uint32_t rs,uint32_t rt,uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void sra(uint32_t rt,uint32_t rd,uint32_t shamt,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void srav(uint32_t rs,uint32_t rt,uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void srl(uint32_t rt,uint32_t rd,uint32_t shamt,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void srlv(uint32_t rs,uint32_t rt,uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void subu(uint32_t rs, uint32_t rt, uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void sub(uint32_t rs, uint32_t rt, uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void oxor(uint32_t rs, uint32_t rt, uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void xori(uint32_t rs,uint32_t rt,uint32_t imm,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void lui(uint32_t rs,uint32_t rt,uint32_t imm,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void sltu(uint32_t rs, uint32_t rt, uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void slt(uint32_t rs, uint32_t rt, uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void sltiu(uint32_t rs,uint32_t rt,uint32_t imm,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void slti(uint32_t rs,uint32_t rt,uint32_t imm,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void beq(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void bgez(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void bgezal(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void bgtz(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void blez(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void bltzal(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void bltz(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void bne(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void j(uint32_t target,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void jal(uint32_t target,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void jalr(uint32_t rs, uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void jr(uint32_t rs,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void teq(uint32_t rs,uint32_t rt,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void teqi(uint32_t rs,uint32_t imm,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void tne(uint32_t rs,uint32_t rt,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void tnei(uint32_t rs,uint32_t imm,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void tgeu(uint32_t rs,uint32_t rt,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void tgeiu(uint32_t rs,uint32_t imm,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void tge(uint32_t rs,uint32_t rt,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void tgei(uint32_t rs,uint32_t imm,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void tltu(uint32_t rs,uint32_t rt,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void tltiu(uint32_t rs,uint32_t imm,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void tlt(uint32_t rs,uint32_t rt,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void tlti(uint32_t rs,uint32_t imm,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void lb(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void lbu(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void lh(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void lhu(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void lw(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void ll(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void sb(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void sh(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void sw(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void swl(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void swr(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void lwl(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void lwr(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void sc(uint32_t rs,uint32_t rt,uint32_t offset,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void mfhi(uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void mflo(uint32_t rd,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void mthi(uint32_t rs,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
void mtlo(uint32_t rs,uint32_t* registers,unsigned char* &pc,  unsigned char* realm);
#endif